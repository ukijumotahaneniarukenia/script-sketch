#!/bin/bash

#Usage:
#単一行単一列の場合(パイプ経由)
#$echo a | ./汎用カンマ区切り文字の展開.sh | bash
#Output:
#1 a a, a,, a, a,,

#単一行単一列の場合(パイプ経由以外)
#$./汎用カンマ区切り文字の展開.sh a | bash
#Output:
#1 a a, a,, a, a,,

#単一行複数列の場合(パイプ経由)
#$echo {a..c} | ./汎用カンマ区切り文字の展開.sh | bash
#Output:
#1 a  a,   a,, a,b a,b,c
#2 b b,a  b,a, b,c  b,c,
#3 c c,b c,b,a  c,   c,,

#単一行複数列の場合(パイプ経由以外)
#$./汎用カンマ区切り文字の展開.sh $(echo {a..c}) | bash
#Output:
#1 a  a,   a,, a,b a,b,c
#2 b b,a  b,a, b,c  b,c,
#3 c c,b c,b,a  c,   c,,

#複数行単一列の場合(パイプ経由)
#$seq 3 | ./汎用カンマ区切り文字の展開.sh | bash
#Output:
#1 1  1,   1,, 1,2 1,2,3
#2 2 2,1  2,1, 2,3  2,3,
#3 3 3,2 3,2,1  3,   3,,

#複数行単一列の場合(パイプ経由以外)
#$./汎用カンマ区切り文字の展開.sh $(seq 3) | bash
#Output:
#1 1  1,   1,, 1,2 1,2,3
#2 2 2,1  2,1, 2,3  2,3,
#3 3 3,2 3,2,1  3,   3,,

#複数行複数列の場合(パイプ経由)
#$paste <(seq 5) <(seq 6 10) | ./汎用カンマ区切り文字の展開.sh | bash
#Output:
# 1  1   1,    1,,  1,6  1,6,2
# 2  6  6,1   6,1,  6,2  6,2,7
# 3  2  2,6  2,6,1  2,7  2,7,3
# 4  7  7,2  7,2,6  7,3  7,3,8
# 5  3  3,7  3,7,2  3,8  3,8,4
# 6  8  8,3  8,3,7  8,4  8,4,9
# 7  4  4,8  4,8,3  4,9  4,9,5
# 8  9  9,4  9,4,8  9,5 9,5,10
# 9  5  5,9  5,9,4 5,10  5,10,
#10 10 10,5 10,5,9  10,   10,,

#$paste <(seq 1  5) <(seq 6 10) <(seq 11 15) | ./汎用カンマ区切り文字の展開.sh | bash
#Output:
# 1  1    1,     1,,   1,6  1,6,11
# 2  6   6,1    6,1,  6,11  6,11,2
# 3 11  11,6  11,6,1  11,2  11,2,7
# 4  2  2,11  2,11,6   2,7  2,7,12
# 5  7   7,2  7,2,11  7,12  7,12,3
# 6 12  12,7  12,7,2  12,3  12,3,8
# 7  3  3,12  3,12,7   3,8  3,8,13
# 8  8   8,3  8,3,12  8,13  8,13,4
# 9 13  13,8  13,8,3  13,4  13,4,9
#10  4  4,13  4,13,8   4,9  4,9,14
#11  9   9,4  9,4,13  9,14  9,14,5
#12 14  14,9  14,9,4  14,5 14,5,10
#13  5  5,14  5,14,9  5,10 5,10,15
#14 10  10,5 10,5,14 10,15  10,15,
#15 15 15,10 15,10,5   15,    15,,

#複数行複数列の場合(パイプ経由以外)
#$./汎用カンマ区切り文字の展開.sh $(paste <(seq 5) <(seq 6 10)) | bash
#Output:
# 1  1   1,    1,,  1,6  1,6,2
# 2  6  6,1   6,1,  6,2  6,2,7
# 3  2  2,6  2,6,1  2,7  2,7,3
# 4  7  7,2  7,2,6  7,3  7,3,8
# 5  3  3,7  3,7,2  3,8  3,8,4
# 6  8  8,3  8,3,7  8,4  8,4,9
# 7  4  4,8  4,8,3  4,9  4,9,5
# 8  9  9,4  9,4,8  9,5 9,5,10
# 9  5  5,9  5,9,4 5,10  5,10,
#10 10 10,5 10,5,9  10,   10,,

#$./汎用カンマ区切り文字の展開.sh $(paste <(seq 1  5) <(seq 6 10) <(seq 11 15)) | bash
#Output:
# 1  1    1,     1,,   1,6  1,6,11
# 2  6   6,1    6,1,  6,11  6,11,2
# 3 11  11,6  11,6,1  11,2  11,2,7
# 4  2  2,11  2,11,6   2,7  2,7,12
# 5  7   7,2  7,2,11  7,12  7,12,3
# 6 12  12,7  12,7,2  12,3  12,3,8
# 7  3  3,12  3,12,7   3,8  3,8,13
# 8  8   8,3  8,3,12  8,13  8,13,4
# 9 13  13,8  13,8,3  13,4  13,4,9
#10  4  4,13  4,13,8   4,9  4,9,14
#11  9   9,4  9,4,13  9,14  9,14,5
#12 14  14,9  14,9,4  14,5 14,5,10
#13  5  5,14  5,14,9  5,10 5,10,15
#14 10  10,5 10,5,14 10,15  10,15,
#15 15 15,10 15,10,5   15,    15,,
make_template(){
  make_header "$@";
  make_body;
  make_footer;
}

make_header(){
  local init_args="$@";
cmd_header="$(cat <<EOS
echo "${init_args}" | xargs | tr ' ' ',' | awk '{cnt=gsub(",",",",\$0)+1;for(i=1;i<=cnt;i++)print \$0}' | \
  awk '{split(\$0,array,",");
  print NR,
EOS
)"
}

build_dyn_cmd(){
  echo "${cmd_header}";
  echo "${cmd_body}" | tac | sort | uniq;
  #echo "${cmd_body}" ;
  echo "${cmd_footer}";
}

make_body(){
  #デフォルト3
  export MX_RANGE_NUM="${MX_RANGE_NUM:-2}";
  cmd_body="$(source ./unko.sh $MX_RANGE_NUM)";
#  cmd_body="$(cat <<EOS
#  array[NR-2]","array[NR-1]","array[NR],
#  array[NR-1]","array[NR],
#  array[NR+1]","array[NR],
#  array[NR+2]","array[NR+1]","array[NR]
#EOS
#)"
}

make_footer(){
cmd_footer="$(cat <<EOS
  }' | keta
EOS
)"
}

main(){
  local init_args="$(cat -)";
  make_template "${init_args}"
  build_dyn_cmd
}

[ -p /dev/stdin ] && cat - | main
[ -p /dev/stdin ] || echo -ne "$@" | main

#arrayの文字列結合の順番間違えないでね
#$echo "a b c" | xargs | tr ' ' ',' | awk '{cnt=gsub(",",",",$0)+1;for(i=1;i<=cnt;i++)print $0}' |   awk '{split($0,array,",");
#  print NR,
#  array[NR-2]","array[NR-1]","array[NR],
#  array[NR-1]","array[NR],
#  array[NR+1]","array[NR],
#  array[NR+2]","array[NR+1]","array[NR]
#  }' | keta
#1   ,,a  ,a b,a c,b,a
#2  ,a,b a,b c,b  ,c,b
#3 a,b,c b,c  ,c   ,,c

