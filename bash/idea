# MOMO

関数作成して分割した後、パイプ化して、それぞれのファンクションファイルに対して、
シンボリックリンクを作成してエイリアス定義する。

ファンクション一覧ファイルや変数一覧ファイルを作成しているのは存在チェック用の機能を作成するため。

callseg関数メンテ入れる。全てはあそこから始まる。
ファンクション切り出したあとはパイプからの標準入力も受け取れるように1ファンクション
1ファイル形式にするため。切り出したファンクションファイルはComposeファイルで集約。
パイプ化のスニペはawk で作成

awkで決まった文言作成する際はfunctionに定義しておく。snippet管理。
shellから作成したawkファイルをincludeする。

sedきわめたい
http://www.grymoire.com/Unix/Sed.html


関数の同士のネストはいいが、処理のネストは避ける。
避け方は呼出先のルーチン参照だけ呼出元に残す。case文が上手く使える。

呼び出し関数の名前をスタックする関数作成。引数には自身の関数名を渡す。caller関数がbashにある。

標準出力する関数はDEBUG変数を直前に置いておく。基本はverboseだけど、フラグセットしたら出力抑える仕組み。オプション解析で実現。
DEBUG変数には:コマンドいれておく。"${DEBUG}" echo -ne "\U1F4A9"

シェル変数を動的に変えるところ。evalと配列つかうはず。

call_seg_func.shは1ファイルに勢いでファンクションをいっぱい作成してしまった際に、1ファンクション1ファイルに切り出します。
汎用ファンクションないかなって精査できるように工夫しました。
extract_test_code.shは切りく出したファンクションファイルにテストコードを書いたあと、
テスト対象のファンクション以外をinvokerファイルとして切り出します。invokerとinvokeeが1対1になるようにしました。
extract_variable.shはシェルスクリプトの中で使用されている変数名を抽出します。自身の変数名の癖を掴み、統一感を出すための名寄せ的な位置付けです。
tool/count_varができるので、それをみて癖を見抜き、var_name_chk.shにpre_var_name=post_var_nameの形式で記載していく想定です。
row numberもawk で出来そう。てかできるな。

grn_rnは前作ったけどね、あれはrow_number関数を実装したかったような気がする。

row_number関数を作る。

ファンクションファイルの行数からファンクションの目印の(){を除く行数を引いた結果とcallsegで生成したファイル件数は一致する。
一致しなかったら、ファンクションの目印に漏れがある。スペース入っているとか。正規表現見直す。
